{"version":3,"sources":["logo.png","ducks/reducer.js","ducks/store.js","components/AuthComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","user","SET_USER","createStore","state","action","type","payload","AuthComponent","props","email","password","username","register","bind","login","this","axios","post","registerdUser","setUser","data","loggedInUser","console","log","className","onSubmit","e","preventDefault","value","onChange","setState","target","onClick","Component","mapDispatchToProps","enhancedComponent","connect","reduxState","App","src","logo","activeClassName","exact","to","path","component","render","React","Boolean","window","location","hostname","match","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5170fd99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.88666ab3.png\";","const initialState = {\n  user: null\n};\n\nexport const SET_USER = \"SET_USER\";\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_USER:\n      return { user: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport function setUser(user) {\n  return {\n    type: SET_USER,\n    payload: user\n  };\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nexport default createStore(reducer);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setUser } from \"../ducks/reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass AuthComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      username: \"\",\n      register: true\n    };\n    this.register = this.register.bind(this);\n    this.login = this.login.bind(this);\n  }\n\n  async register() {\n    const { email, password, username } = this.state;\n    const registerdUser = await axios.post(\"/auth/register\", {\n      email,\n      username,\n      password\n    });\n\n    this.props.setUser(registerdUser.data);\n  }\n\n  async login() {\n    const { email, password } = this.state;\n    const loggedInUser = await axios.post(\"/auth/login\", {\n      email,\n      password\n    });\n\n    this.props.setUser(loggedInUser.data);\n  }\n\n  render() {\n    //   destructured state values\n    const { email, username, password, register } = this.state;\n    console.log(this.props);\n    return (\n      <div className=\"auth-container\">\n        <form\n          onSubmit={e => {\n            //   prevent default to stop form from refreshing\n            e.preventDefault();\n            this.register();\n          }}\n        >\n          {/* username input */}\n          {register && (\n            <div className=\"input-container\">\n              <label>username</label>\n              <input\n                value={username}\n                onChange={e =>\n                  this.setState({\n                    username: e.target.value\n                  })\n                }\n              />\n            </div>\n          )}\n          {/* email input */}\n          <div className=\"input-container\">\n            <label>email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={e =>\n                this.setState({\n                  email: e.target.value\n                })\n              }\n            />\n          </div>\n          {/* password */}\n          <div className=\"input-container\">\n            <label>password</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={e =>\n                this.setState({\n                  password: e.target.value\n                })\n              }\n            />\n          </div>\n          <button>{register ? \"Register\" : \"Login\"}</button>\n        </form>\n        {!register && (\n          <button\n            onClick={() =>\n              this.setState({\n                register: true\n              })\n            }\n          >\n            Go To Register\n          </button>\n        )}\n        {register && (\n          <button\n            onClick={() =>\n              this.setState({\n                register: false\n              })\n            }\n          >\n            Go To Login\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapReduxStateToProps(reduxState) {\n  return reduxState;\n}\n\nconst mapDispatchToProps = {\n  setUser\n};\n\nconst enhancedComponent = connect(\n  mapReduxStateToProps,\n  mapDispatchToProps\n);\n\nexport default enhancedComponent(AuthComponent);\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport { Switch, NavLink, Route } from \"react-router-dom\";\nimport AuthComponent from \"./components/AuthComponent\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          {/* inner double container */}\n          <div>\n            {/* logo container */}\n            <div>\n              <img src={logo} />\n            </div>\n            {/* nav container */}\n            <nav>\n              <NavLink activeClassName=\"active\" exact to=\"/\">\n                Home\n              </NavLink>\n              <NavLink activeClassName=\"active\" to=\"/store\">\n                Store\n              </NavLink>\n              <NavLink activeClassName=\"active\" to=\"/profile\">\n                Profile\n              </NavLink>\n            </nav>\n          </div>\n        </header>\n        <Switch>\n          <Route exact path=\"/\" component={AuthComponent} />\n          <Route\n            exact\n            path=\"/store\"\n            render={() => {\n              return <div>Store</div>;\n            }}\n          />\n          <Route\n            exact\n            path=\"/profile\"\n            render={() => {\n              return <div>Profile</div>;\n            }}\n          />\n          <Route\n            exact\n            path=\"*\"\n            render={() => {\n              return <div>GET THAT SPOOOKY BUTT OUTTA HERE!!!</div>;\n            }}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./ducks/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}